{"version":3,"sources":["components/card.js","components/button.js","components/progress.js","components/input.js","App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","children","className","React","createElement","CardHeader","_ref2","CardTitle","_ref3","CardContent","_ref4","Button","onClick","Progress","value","style","width","Input","onChange","placeholder","type","SubtaskItem","subtask","index","onDelete","onProgressChange","onUpdate","isEditing","setIsEditing","useState","editedName","setEditedName","name","newSubtaskName","setNewSubtaskName","newSubtaskDate","setNewSubtaskDate","handleUpdate","addNestedSubtask","newNestedSubtask","id","Date","now","date","progress","completed","subtasks","Draggable","draggableId","toString","provided","Object","assign","ref","innerRef","draggableProps","dragHandleProps","CheckCircle","size","e","target","onBlur","color","variant","Trash2","indicatorColor","length","map","nestedSubtask","nestedIndex","key","updatedSubtasks","filter","s","newProgress","updatedNestedSubtask","TaskItem","task","ProjectCard","project","isOpen","setIsOpen","newTask","setNewTask","newTaskDate","setNewTaskDate","daysLeft","Math","max","ceil","deadline","deleteTask","taskId","updatedTasks","tasks","updateTaskProgress","updateTask","updatedTask","calculateProgress","totalProgress","reduce","sum","round","Calendar","ChevronUp","ChevronDown","addTask","trim","PlusCircle","DragDropContext","onDragEnd","result","destination","sourceIndex","source","destIndex","newTasks","Array","from","reorderedTask","splice","Droppable","droppableId","droppableProps","ProjectManagementApp","projects","setProjects","newProjectName","setNewProjectName","newProjectDeadline","setNewProjectDeadline","deleteProject","updateProject","updatedProject","addProject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.fb05569c.chunk.js","sourcesContent":["// Card.js\r\nimport React from 'react';\r\n\r\nexport const Card = ({ children, className }) => (\r\n    <div className={`p-4 bg-white rounded-lg shadow ${className}`}>{children}</div>\r\n  );\r\n  \r\n  export const CardHeader = ({ children, className }) => (\r\n    <div className={`border-b pb-4 ${className}`}>{children}</div>\r\n  );\r\n  \r\n  export const CardTitle = ({ children, className }) => (\r\n    <h2 className={`text-xl font-bold ${className}`}>{children}</h2>\r\n  );\r\n  \r\n  export const CardContent = ({ children, className }) => (\r\n    <div className={`p-4 ${className}`}>{children}</div>\r\n  );\r\n  ","// Button.js\r\nimport React from 'react';\r\n\r\nexport const Button = ({ children, onClick, className }) => (\r\n    <button onClick={onClick} className={`p-2 rounded-lg bg-blue-500 hover:bg-blue-600 text-white ${className}`}>\r\n      {children}\r\n    </button>\r\n  );\r\n  ","// Progress.js\r\nimport React from 'react';\r\n\r\nexport const Progress = ({ value }) => (\r\n    <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n      <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: `${value}%` }}></div>\r\n    </div>\r\n  );\r\n  ","// Input.js\r\nimport React from 'react';\r\n\r\nexport const Input = ({ value, onChange, placeholder, className, type = 'text' }) => (\r\n    <input\r\n      type={type}\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder={placeholder}\r\n      className={`p-2 border rounded-lg ${className}`}\r\n    />\r\n  );\r\n  ","import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { PlusCircle, Trash2, ChevronDown, ChevronUp, Calendar, CheckCircle } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from './components/card';\nimport { Button } from './components/button';\nimport { Progress } from './components/progress';\nimport { Input } from './components/input';\nimport './index.css';\n\nconst SubtaskItem = ({ subtask, index, onDelete, onProgressChange, onUpdate }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedName, setEditedName] = useState(subtask.name);\n  const [newSubtaskName, setNewSubtaskName] = useState('');\n  const [newSubtaskDate, setNewSubtaskDate] = useState('');\n\n  const handleUpdate = () => {\n    onUpdate({ ...subtask, name: editedName });\n    setIsEditing(false);\n  };\n\n  const addNestedSubtask = () => {\n    if (newSubtaskName && newSubtaskDate) {\n      const newNestedSubtask = {\n        id: Date.now(),\n        name: newSubtaskName,\n        date: newSubtaskDate,\n        progress: 0,\n        completed: false,\n        subtasks: []\n      };\n      onUpdate({ ...subtask, subtasks: [...(subtask.subtasks || []), newNestedSubtask] });\n      setNewSubtaskName('');\n      setNewSubtaskDate('');\n    }\n  };\n\n  return (\n    <Draggable draggableId={subtask.id.toString()} index={index}>\n      {(provided) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className=\"flex flex-col space-y-2 mb-2 bg-white p-3 rounded-lg shadow-md border border-gray-300\"\n        >\n          <div className=\"flex items-center justify-between space-x-2\">\n            <div className=\"flex items-center space-x-2 flex-grow\">\n              <CheckCircle \n                size={20} \n                className={subtask.completed ? \"text-green-500\" : \"text-gray-400\"}\n                onClick={() => onProgressChange(subtask.id, subtask.completed ? 0 : 100)}\n              />\n              {isEditing ? (\n                <Input\n                  value={editedName}\n                  onChange={(e) => setEditedName(e.target.value)}\n                  onBlur={handleUpdate}\n                  className=\"flex-grow border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n                />\n              ) : (\n                <span\n                  className={subtask.completed ? 'line-through flex-grow text-gray-500' : 'flex-grow text-gray-800'}\n                  onClick={() => setIsEditing(true)}\n                >\n                  {subtask.name}\n                </span>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">{subtask.date}</span>\n              <span className=\"text-sm font-semibold\" style={{color: `hsl(${subtask.progress}, 100%, 40%)`}}>\n                {subtask.progress}%\n              </span>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => onDelete(subtask.id)} className=\"text-red-600\">\n                <Trash2 size={16} />\n              </Button>\n            </div>\n          </div>\n          <Progress value={subtask.progress} className=\"h-1 bg-gray-200\" indicatorColor=\"bg-blue-600\" />\n          <div className=\"flex space-x-2 mt-2\">\n            <Input\n              placeholder=\"New subtask name\"\n              value={newSubtaskName}\n              onChange={(e) => setNewSubtaskName(e.target.value)}\n              className=\"flex-grow border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n            />\n            <Input\n              type=\"date\"\n              value={newSubtaskDate}\n              onChange={(e) => setNewSubtaskDate(e.target.value)}\n              className=\"border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n            />\n            <Button onClick={addNestedSubtask} size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-4 py-2\">\n              Add Subtask\n            </Button>\n          </div>\n          {subtask.subtasks && subtask.subtasks.length > 0 && (\n            <div className=\"pl-4 mt-2\">\n              {subtask.subtasks.map((nestedSubtask, nestedIndex) => (\n                <SubtaskItem\n                  key={nestedSubtask.id}\n                  subtask={nestedSubtask}\n                  index={nestedIndex}\n                  onDelete={(id) => {\n                    const updatedSubtasks = subtask.subtasks.filter(s => s.id !== id);\n                    onUpdate({ ...subtask, subtasks: updatedSubtasks });\n                  }}\n                  onProgressChange={(id, newProgress) => {\n                    const updatedSubtasks = subtask.subtasks.map(s =>\n                      s.id === id ? { ...s, progress: newProgress, completed: newProgress === 100 } : s\n                    );\n                    onUpdate({ ...subtask, subtasks: updatedSubtasks });\n                  }}\n                  onUpdate={(updatedNestedSubtask) => {\n                    const updatedSubtasks = subtask.subtasks.map(s =>\n                      s.id === updatedNestedSubtask.id ? updatedNestedSubtask : s\n                    );\n                    onUpdate({ ...subtask, subtasks: updatedSubtasks });\n                  }}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nconst TaskItem = ({ task, index, onDelete, onProgressChange, onUpdate }) => (\n  <SubtaskItem\n    subtask={task}\n    index={index}\n    onDelete={onDelete}\n    onProgressChange={onProgressChange}\n    onUpdate={onUpdate}\n  />\n);\n\nconst ProjectCard = ({ project, onDelete, onUpdate }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [newTask, setNewTask] = useState('');\n  const [newTaskDate, setNewTaskDate] = useState('');\n\n  const daysLeft = Math.max(0, Math.ceil((new Date(project.deadline) - new Date()) / (1000 * 60 * 60 * 24)));\n\n  const addTask = () => {\n    if (newTask.trim() && newTaskDate) {\n      onUpdate({\n        ...project,\n        tasks: [...project.tasks, { id: Date.now(), name: newTask, date: newTaskDate, progress: 0, completed: false, subtasks: [] }]\n      });\n      setNewTask('');\n      setNewTaskDate('');\n    }\n  };\n\n  const deleteTask = (taskId) => {\n    const updatedTasks = project.tasks.filter(task => task.id !== taskId);\n    onUpdate({ ...project, tasks: updatedTasks });\n  };\n\n  const updateTaskProgress = (taskId, newProgress) => {\n    const updatedTasks = project.tasks.map(task =>\n      task.id === taskId\n        ? { ...task, progress: newProgress, completed: newProgress === 100 }\n        : task\n    );\n    onUpdate({ ...project, tasks: updatedTasks });\n  };\n\n  const updateTask = (updatedTask) => {\n    const updatedTasks = project.tasks.map(task =>\n      task.id === updatedTask.id ? updatedTask : task\n    );\n    onUpdate({ ...project, tasks: updatedTasks });\n  };\n\n  const handleDragEnd = (result) => {\n    if (!result.destination) return;\n\n    const sourceIndex = result.source.index;\n    const destIndex = result.destination.index;\n\n    if (sourceIndex === destIndex) {\n      const task = project.tasks[sourceIndex];\n      const newProgress = Math.round((destIndex / (project.tasks.length - 1)) * 100);\n      updateTaskProgress(task.id, newProgress);\n    } else {\n      const newTasks = Array.from(project.tasks);\n      const [reorderedTask] = newTasks.splice(sourceIndex, 1);\n      newTasks.splice(destIndex, 0, reorderedTask);\n      onUpdate({ ...project, tasks: newTasks });\n    }\n  };\n\n  const calculateProgress = () => {\n    if (project.tasks.length === 0) return 0;\n    const totalProgress = project.tasks.reduce((sum, task) => sum + task.progress, 0);\n    return Math.round(totalProgress / project.tasks.length);\n  };\n\n  const progress = calculateProgress();\n\n  return (\n    <Card className=\"mb-4 overflow-hidden bg-gradient-to-br from-gray-50 to-gray-100 shadow-lg rounded-lg\">\n      <CardHeader className=\"flex flex-row items-center justify-between p-4\">\n        <CardTitle className=\"text-lg font-bold text-gray-900\">{project.name}</CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <Calendar size={16} className=\"text-gray-700\" />\n          <span className=\"text-sm text-gray-800\">{daysLeft} days left</span>\n          <span className=\"text-sm font-semibold text-gray-900\">{progress}% complete</span>\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsOpen(!isOpen)} className=\"text-gray-700\">\n            {isOpen ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => onDelete(project.id)} className=\"text-red-600\">\n            <Trash2 size={20} />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <Progress value={progress} className=\"mb-2 h-2 bg-gray-200\" indicatorColor=\"bg-gradient-to-r from-gray-400 to-gray-600\" />\n        {isOpen && (\n          <div className=\"mt-4 space-y-2\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Add new task\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                className=\"border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n              />\n              <Input\n                type=\"date\"\n                value={newTaskDate}\n                onChange={(e) => setNewTaskDate(e.target.value)}\n                className=\"border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n              />\n              <Button onClick={addTask} className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-4 py-2\">\n                <PlusCircle size={20} className=\"mr-2\" />\n                Add Task\n              </Button>\n            </div>\n            <DragDropContext onDragEnd={handleDragEnd}>\n              <Droppable droppableId={`project-${project.id}`}>\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    {project.tasks.map((task, index) => (\n                      <TaskItem\n                        key={task.id}\n                        task={task}\n                        index={index}\n                        onDelete={deleteTask}\n                        onProgressChange={updateTaskProgress}\n                        onUpdate={updateTask}\n                      />\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nconst ProjectManagementApp = () => {\n  const [projects, setProjects] = useState([]);\n  const [newProjectName, setNewProjectName] = useState('');\n  const [newProjectDeadline, setNewProjectDeadline] = useState('');\n\n  const addProject = () => {\n    if (newProjectName.trim() && newProjectDeadline) {\n      setProjects([\n        ...projects,\n        {\n          id: Date.now(),\n          name: newProjectName,\n          deadline: newProjectDeadline,\n          tasks: []\n        }\n      ]);\n      setNewProjectName('');\n      setNewProjectDeadline('');\n    }\n  };\n\n  const deleteProject = (id) => {\n    setProjects(projects.filter(project => project.id !== id));\n  };\n\n  const updateProject = (updatedProject) => {\n    setProjects(projects.map(project =>\n      project.id === updatedProject.id ? updatedProject : project\n    ));\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl bg-gradient-to-br from-gray-100 to-gray-300 min-h-screen\">\n      <h1 className=\"text-4xl font-bold mb-6 text-center text-gray-900 bg-clip-text bg-gradient-to-r from-gray-800 via-gray-600 to-gray-400\">\n        Project Management App\n      </h1>\n      <Card className=\"mb-6 bg-gradient-to-br from-gray-50 to-gray-100 shadow-lg rounded-lg\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex space-x-2\">\n            <Input\n              placeholder=\"New project name\"\n              value={newProjectName}\n              onChange={(e) => setNewProjectName(e.target.value)}\n              className=\"border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n            />\n            <Input\n              type=\"date\"\n              value={newProjectDeadline}\n              onChange={(e) => setNewProjectDeadline(e.target.value)}\n              className=\"border border-gray-300 rounded-md px-2 py-1 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n            />\n            <Button onClick={addProject} className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-4 py-2\">\n              <PlusCircle size={20} className=\"mr-2\" />\n              Add Project\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      {projects.map(project => (\n        <ProjectCard\n          key={project.id}\n          project={project}\n          onDelete={deleteProject}\n          onUpdate={updateProject}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ProjectManagementApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}